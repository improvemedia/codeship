#!/usr/bin/env ruby
require 'json'
require 'net/http'
require 'openssl'

branch    = ENV['CI_BRANCH']
build_uid = ENV['CI_BUILD_NUMBER']

raise 'branch is undefined' if branch.nil?
raise 'build is undefined' if build_uid.nil?

class Project
  API_ENDPOINT = 'https://api.codeship.com/v2'.freeze

  attr_reader :organization_uid, :project_uid

  def initialize(organization_uid, project_uid)
    @organization_uid = organization_uid
    @project_uid      = project_uid
  end

  def first_build?(branch, build_uid)
    build = first_working_build_by_branch(branch)
    raise "no branches working with #{branch}" if build.nil?

    build['uuid'] == build_uid
  end

  def reload!
    @builds = fetch_builds
  end

  private

  def first_working_build_by_branch(name)
    working_branches_by_name(name).min_by { |b| b['queued_at'] }
  end

  def working_branches_by_name(name)
    builds.select do |build|
      build['ref'] == "heads/#{name}" && build['status'] == 'testing'
    end
  end

  def token
    url    = URI("#{API_ENDPOINT}/auth")
    client = client_for(url)

    request = Net::HTTP::Post.new(url).tap do |result|
      result.basic_auth(ENV['CI_LOGIN'], ENV['CI_PASSWORD'])
    end
    response = client.request(request)

    parsed_response(response).fetch('access_token')
  end

  def client_for(url)
    Net::HTTP.new(url.host, url.port).tap do |result|
      result.use_ssl = true
      result.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end
  end

  def parsed_response(response)
    JSON.parse(response.read_body)
  end

  def builds
    @builds ||= fetch_builds
  end

  def fetch_builds
    url = URI(
      "#{API_ENDPOINT}/organizations/#{organization_uid}/projects/#{project_uid}/builds"
    )
    client = client_for(url)

    request = Net::HTTP::Get.new(url).tap do |result|
      result['Authorization'] = "Bearer #{token}"
    end
    response = client.request(request)

    parsed_response(response).fetch('builds')
  end
end

# ImproveMedia organization uid, Jarvis project uid
project = Project.new(
  '23d3a7f0-e93d-0133-b53e-76bef8d7b14f', '7ef7f420-c982-0132-2d00-12acee263f11'
)

puts "BRANCH:#{branch}"
puts "BUILD: #{build_uid}"
puts project.send(:working_branches_by_name, branch)

loop do
  break if project.first_build?(branch, build_uid)
  puts 'wait'
  sleep 60
  project.reload!
end

puts 'go!'
